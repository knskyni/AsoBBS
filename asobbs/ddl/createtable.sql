SET SESSION FOREIGN_KEY_CHECKS=0;

/* Drop Indexes */

DROP INDEX IDX_ATTACED_FILE_BBSID ON ATTACHED_FILE_TBL;
DROP INDEX INDEX_CATEGORYTBL_ROOMID ON CATEGORY_TBL;
DROP INDEX IDX_HIS_USER_ID ON HISTORY_TBL;
DROP INDEX IDX_HIS_ACTION_ID ON HISTORY_TBL;
DROP INDEX IDX_HIS_ACTION_DATE ON HISTORY_TBL;
DROP INDEX IDX_USER_COURSE_ID ON USER_TBL;
DROP INDEX IDX_USER_ROLE_ID ON USER_TBL;
DROP INDEX IDX_USER_TBL_NICKNAME ON USER_TBL;
DROP INDEX IDX_USER_GRADE ON USER_TBL;
DROP INDEX IDX_USER_MAILADRESS ON USER_TBL;
DROP INDEX INDEX_USERTBL_STUDENTNO ON USER_TBL;



/* Drop Tables */

DROP TABLE IF EXISTS HISTORY_TBL;
DROP TABLE IF EXISTS ACTION_MASTER;
DROP TABLE IF EXISTS ATTACHED_FILE_TBL;
DROP TABLE IF EXISTS BBS_CHECK_TBL;
DROP TABLE IF EXISTS BBS_TBL;
DROP TABLE IF EXISTS CATEGORY_TBL;
DROP TABLE IF EXISTS CHAT_TABLE;
DROP TABLE IF EXISTS ROOM_USER_TBL;
DROP TABLE IF EXISTS ROOM_TBL;
DROP TABLE IF EXISTS USER_TBL;
DROP TABLE IF EXISTS COURSE_MASTER;
DROP TABLE IF EXISTS ROLE_MASTER;




/* Create Tables */

-- 操作マスター
CREATE TABLE ACTION_MASTER
(
	ACTION_ID int NOT NULL,
	ACTION_NAME varchar(200),
	PRIMARY KEY (ACTION_ID)
) COMMENT = '操作マスター';


CREATE TABLE ATTACHED_FILE_TBL
(
	ATTACHED_FILE_ID int NOT NULL AUTO_INCREMENT,
	BBS_ID int NOT NULL,
	-- ファイルのフルパス
	FILE_PATH varchar(600) NOT NULL COMMENT 'ファイルのフルパス',
	-- 不正防止用に、ファイルをDLさせるときは必ずファイルIDとファイルサイズとをマッチングさせる
	FILE_SIZE int NOT NULL COMMENT '不正防止用に、ファイルをDLさせるときは必ずファイルIDとファイルサイズとをマッチングさせる',
	PRIMARY KEY (ATTACHED_FILE_ID)
);


CREATE TABLE BBS_CHECK_TBL
(
	BBS_ID int NOT NULL,
	-- ユーザーID
	USER_ID int NOT NULL COMMENT 'ユーザーID',
	CHECK_DATE datetime NOT NULL,
	PRIMARY KEY (BBS_ID, USER_ID)
);


CREATE TABLE BBS_TBL
(
	BBS_ID int NOT NULL AUTO_INCREMENT,
	-- ルーム毎に設定されている掲示板のカテゴリ
	CATEGORY_ID int NOT NULL COMMENT 'ルーム毎に設定されている掲示板のカテゴリ',
	TITLE varchar(100) NOT NULL,
	MESSAGE varchar(16000) NOT NULL,
	-- 緊急の書き込みの場合はONにする
	-- 1:緊急の書き込み
	-- 0:通常の書き込み
	EMERGENCY_FLG int DEFAULT 0 NOT NULL COMMENT '緊急の書き込みの場合はONにする
1:緊急の書き込み
0:通常の書き込み',
	-- 返信元のBBSID
	-- おおもとの書き込みの場合はNULLとなる
	PARENT_BBS_ID int COMMENT '返信元のBBSID
おおもとの書き込みの場合はNULLとなる',
	-- 返信可能な書き込みかどうかを表す
	Reply_OK_FLG int NOT NULL COMMENT '返信可能な書き込みかどうかを表す',
	CREATE_DATE datetime NOT NULL,
	CREATE_USER_ID int NOT NULL,
	UPDATE_DATE datetime NOT NULL,
	UPDATE_USER_ID int NOT NULL,
	PRIMARY KEY (BBS_ID)
);


CREATE TABLE CATEGORY_TBL
(
	-- ルーム毎に設定されている掲示板のカテゴリ
	CATEGORY_ID int NOT NULL AUTO_INCREMENT COMMENT 'ルーム毎に設定されている掲示板のカテゴリ',
	-- カテゴリが属しているルームID
	ROOM_ID int NOT NULL COMMENT 'カテゴリが属しているルームID',
	NAME varchar(10) NOT NULL,
	COUNT int NOT NULL,
	PRIMARY KEY (CATEGORY_ID),
	CONSTRAINT UNIQUE_CATEGORY_BY_ROOM_CNAME UNIQUE (ROOM_ID, NAME)
);


CREATE TABLE CHAT_TABLE
(
	MSG_ID int NOT NULL AUTO_INCREMENT,
	-- メッセージ
	MSG varchar(1000) NOT NULL COMMENT 'メッセージ',
	regster_datetime datetime NOT NULL,
	-- ユーザーID
	from_user_id int NOT NULL COMMENT 'ユーザーID',
	-- ユーザーID
	to_user_id int NOT NULL COMMENT 'ユーザーID',
	-- ユーザーID
	USER_ID int NOT NULL COMMENT 'ユーザーID',
	PRIMARY KEY (MSG_ID)
);


CREATE TABLE COURSE_MASTER
(
	COURSE_ID int NOT NULL,
	-- 学科名
	COURSE_NAME varchar(100) NOT NULL COMMENT '学科名',
	PRIMARY KEY (COURSE_ID)
);


-- 操作履歴テーブル
-- 操作履歴のテーブルです
CREATE TABLE HISTORY_TBL
(
	HISTORY_ID int NOT NULL AUTO_INCREMENT,
	-- ユーザーID
	USER_ID int NOT NULL COMMENT 'ユーザーID',
	ACTION_ID int NOT NULL,
	ACTION_DATE datetime NOT NULL,
	-- 付加情報
	MESSAGE varchar(2000) COMMENT '付加情報',
	PRIMARY KEY (HISTORY_ID)
) COMMENT = '操作履歴テーブル
操作履歴のテーブルです';


-- 役割マスタ
-- ロールによる画面へのアクセス権限は、Webアプリの設定ファイルにて行う
-- （いちいちDBにアクセスするとパ
CREATE TABLE ROLE_MASTER
(
	ROLE_ID int NOT NULL,
	ROLE_NAME varchar(100) NOT NULL,
	PRIMARY KEY (ROLE_ID)
) COMMENT = '役割マスタ
ロールによる画面へのアクセス権限は、Webアプリの設定ファイルにて行う
（いちいちDBにアクセスするとパ';


CREATE TABLE ROOM_TBL
(
	-- ルームID
	ROOM_ID int NOT NULL AUTO_INCREMENT COMMENT 'ルームID',
	-- ルーム名
	NAME varchar(100) NOT NULL COMMENT 'ルーム名',
	-- 作成日時
	CREATE_DATE datetime NOT NULL COMMENT '作成日時',
	-- 作成ユーザーID
	CREATE_USER_ID int NOT NULL COMMENT '作成ユーザーID',
	-- 初回作成時、UPDATE_DATEとCREATE_DATEは同じになる
	UPDATE_DATE datetime NOT NULL COMMENT '初回作成時、UPDATE_DATEとCREATE_DATEは同じになる',
	-- ユーザーID
	UPDATE_USER_ID int NOT NULL COMMENT 'ユーザーID',
	PRIMARY KEY (ROOM_ID),
	UNIQUE (NAME)
);


CREATE TABLE ROOM_USER_TBL
(
	-- ルームID
	ROOM_ID int NOT NULL COMMENT 'ルームID',
	-- ユーザーID
	USER_ID int NOT NULL COMMENT 'ユーザーID',
	-- 0:管理者（ルームの編集可能）
	-- 1:閲覧者（ルームの編集不可能）
	ROOM_ROLE int NOT NULL COMMENT '0:管理者（ルームの編集可能）
1:閲覧者（ルームの編集不可能）',
	PRIMARY KEY (ROOM_ID, USER_ID)
);


-- 利用者テーブル
-- ログイン可能な利用者は全てこのテーブルに登録される
CREATE TABLE USER_TBL
(
	-- ユーザーID
	USER_ID int NOT NULL AUTO_INCREMENT COMMENT 'ユーザーID',
	STUDENT_NO varchar(10) NOT NULL,
	-- メールアドレス（ログインID）
	MAILADRESS varchar(255) NOT NULL COMMENT 'メールアドレス（ログインID）',
	-- パスワードのハッシュ値
	-- ソルト値は設定ファイルから取得
	-- ソルト+パスワード+ソルト
	-- でハッシュ値を計算
	PASSWORD varchar(255) NOT NULL COMMENT 'パスワードのハッシュ値
ソルト値は設定ファイルから取得
ソルト+パスワード+ソルト
でハッシュ値を計算',
	-- 学生は学籍番号
	-- 職員は職員ID
	NAME varchar(100) NOT NULL COMMENT '学生は学籍番号
職員は職員ID',
	-- ニックネーム
	-- ※AESで暗号化する
	-- 鍵は、設定ファイルの設定値+メアド
	NICK_NAME varchar(100) NOT NULL COMMENT 'ニックネーム
※AESで暗号化する
鍵は、設定ファイルの設定値+メアド',
	-- アカウントの有効期限（指定日まで有効）
	-- NULLの場合は無期限
	ACCOUNT_EXPRY_DATE date COMMENT 'アカウントの有効期限（指定日まで有効）
NULLの場合は無期限',
	-- NULLは無期限
	PASSWORD_EXPIRYDATE date COMMENT 'NULLは無期限',
	-- ユーザーの所属学科
	-- ROLEが「先生」の場合も必要
	-- どこにも所属していない場合は
	-- 学科「その他」のIDが入る
	COURSE_ID int NOT NULL COMMENT 'ユーザーの所属学科
ROLEが「先生」の場合も必要
どこにも所属していない場合は
学科「その他」のIDが入る',
	-- 役割ID
	ROLE_ID int NOT NULL COMMENT '役割ID',
	-- 初めてのログインかどうかを判定するフラグ
	IS_FIRST_FLG int NOT NULL COMMENT '初めてのログインかどうかを判定するフラグ',
	-- 認証失敗時カウントアップされる
	-- 何度失敗してもアカウントをロックしない場合は、カウントアップしない
	CERTIFY_ERR_CNT int DEFAULT 0 NOT NULL COMMENT '認証失敗時カウントアップされる
何度失敗してもアカウントをロックしない場合は、カウントアップしない',
	IS_LOCK_FLG int DEFAULT 0 NOT NULL,
	-- 入学年度
	-- ロールが学生の場合のみ
	-- そのほかはNULL
	ADMISSION_YEAR int COMMENT '入学年度
ロールが学生の場合のみ
そのほかはNULL',
	-- 在校生や現役の教務はNULL
	GRADUATE_YEAR int COMMENT '在校生や現役の教務はNULL',
	-- 留年するたびに１プラスする
	-- 学年は
	-- 現在の年度-入学年度-留年回数+1
	-- で求める
	REPEAT_YEAR_COUNT int DEFAULT 0 NOT NULL COMMENT '留年するたびに１プラスする
学年は
現在の年度-入学年度-留年回数+1
で求める',
	GIVE_UP_YEAR int,
	REMARK varchar(4000),
	ENTRY_DATE datetime NOT NULL,
	UPDATE_DATE datetime NOT NULL,
	-- NULLの場合は未設定
	AVATAR_ID_CSV varchar(100) COMMENT 'NULLの場合は未設定',
	-- 2018/1/19で追加
	GRADE int DEFAULT 1 NOT NULL COMMENT '2018/1/19で追加',
	PRIMARY KEY (USER_ID),
	UNIQUE (STUDENT_NO),
	UNIQUE (MAILADRESS)
) COMMENT = '利用者テーブル
ログイン可能な利用者は全てこのテーブルに登録される';



/* Create Foreign Keys */

ALTER TABLE HISTORY_TBL
	ADD FOREIGN KEY (ACTION_ID)
	REFERENCES ACTION_MASTER (ACTION_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ATTACHED_FILE_TBL
	ADD FOREIGN KEY (BBS_ID)
	REFERENCES BBS_TBL (BBS_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE BBS_CHECK_TBL
	ADD FOREIGN KEY (BBS_ID)
	REFERENCES BBS_TBL (BBS_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE BBS_TBL
	ADD FOREIGN KEY (CATEGORY_ID)
	REFERENCES CATEGORY_TBL (CATEGORY_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE USER_TBL
	ADD FOREIGN KEY (COURSE_ID)
	REFERENCES COURSE_MASTER (COURSE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE USER_TBL
	ADD FOREIGN KEY (ROLE_ID)
	REFERENCES ROLE_MASTER (ROLE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE CATEGORY_TBL
	ADD FOREIGN KEY (ROOM_ID)
	REFERENCES ROOM_TBL (ROOM_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ROOM_USER_TBL
	ADD FOREIGN KEY (ROOM_ID)
	REFERENCES ROOM_TBL (ROOM_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE BBS_CHECK_TBL
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USER_TBL (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE CHAT_TABLE
	ADD FOREIGN KEY (to_user_id)
	REFERENCES USER_TBL (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE CHAT_TABLE
	ADD FOREIGN KEY (from_user_id)
	REFERENCES USER_TBL (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE HISTORY_TBL
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USER_TBL (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ROOM_TBL
	ADD FOREIGN KEY (CREATE_USER_ID)
	REFERENCES USER_TBL (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ROOM_TBL
	ADD FOREIGN KEY (UPDATE_USER_ID)
	REFERENCES USER_TBL (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ROOM_USER_TBL
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USER_TBL (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX IDX_ATTACED_FILE_BBSID ON ATTACHED_FILE_TBL (BBS_ID ASC);
CREATE INDEX INDEX_CATEGORYTBL_ROOMID ON CATEGORY_TBL (ROOM_ID ASC);
CREATE INDEX IDX_HIS_USER_ID ON HISTORY_TBL (USER_ID ASC);
CREATE INDEX IDX_HIS_ACTION_ID ON HISTORY_TBL (ACTION_ID ASC);
CREATE INDEX IDX_HIS_ACTION_DATE ON HISTORY_TBL (ACTION_DATE ASC);
CREATE INDEX IDX_USER_COURSE_ID ON USER_TBL (COURSE_ID ASC);
CREATE INDEX IDX_USER_ROLE_ID ON USER_TBL (ROLE_ID ASC);
CREATE INDEX IDX_USER_TBL_NICKNAME ON USER_TBL (NICK_NAME ASC);
CREATE INDEX IDX_USER_GRADE ON USER_TBL (GRADE ASC);
CREATE INDEX IDX_USER_MAILADRESS ON USER_TBL (MAILADRESS ASC);
CREATE INDEX INDEX_USERTBL_STUDENTNO ON USER_TBL (STUDENT_NO ASC);



