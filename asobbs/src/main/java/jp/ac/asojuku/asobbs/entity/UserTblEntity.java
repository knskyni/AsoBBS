package jp.ac.asojuku.asobbs.entity;

import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;

import lombok.Data;

/**
 * ユーザーテーブル モデルクラス.
 * 
 * @author generated by ERMaster
 * @version $Id$
 */
@Data
@Entity 
@Table(name="USER_TBL")
public class UserTblEntity implements Serializable {

	/** serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** USER_ID. */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer userId;

	/** 学籍番号. */
	private String studentNo;

	/** メールアドレス. */
	private String mailadress;

	/** ログインパスワード. */
	private String password;

	/** 名前. */
	private String name;

	/** ニックネーム. */
	private String nickName;

	/** アカウント有効期限. */
	private Date accountExpryDate;

	/** パスワード有効期限. */
	private Date passwordExpirydate;

	/** 学科マスター. */
    @OneToOne
    @JoinColumn(name="courseId")
	private CourseMasterEntity courseMaster;

	/** 役割マスタ. */
    @OneToOne
    @JoinColumn(name="roleId")
	private RoleMasterEntity roleMaster;

	/** 初ログインフラグ. */
	private Integer isFirstFlg;

	/** 認証失敗カウント. */
	private Integer certifyErrCnt;

	/** アカウントロックフラグ. */
	private Integer isLockFlg;

	/** 入学年度. */
	private Integer admissionYear;

	/** 卒業年度. */
	private Integer graduateYear;

	/** 留年回数. */
	private Integer repeatYearCount;

	/** 退学年度. */
	private Integer giveUpYear;

	/** 備考. */
	private String remark;

	/** 登録日付. */
	private Date entryDate;

	/** 更新日付. */
	private Date updateDate;

	/** アバターのIDがカンマ区切りで入っている. */
	private String avatarIdCsv;

	/** 学年. */
	private Integer grade;

	/** チャットテーブル 一覧. */
    @OneToMany(mappedBy = "fromUserTbl")
	private Set<ChatTableEntity> chatTableSet;

	/** 削除フラグ. */
	private Integer delFlg;
	/**
	 * コンストラクタ.
	 */
	public UserTblEntity() {
		this.chatTableSet = new HashSet<ChatTableEntity>();
	}

	@PrePersist
    public void onPrePersist() {
		setEntryDate(new Date());
		setUpdateDate(new Date());
    }

    @PreUpdate
    public void onPreUpdate() {
    	setUpdateDate(new Date());
    }

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((userId == null) ? 0 : userId.hashCode());
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		UserTblEntity other = (UserTblEntity) obj;
		if (userId == null) {
			if (other.userId != null) {
				return false;
			}
		} else if (!userId.equals(other.userId)) {
			return false;
		}
		return true;
	}

}
