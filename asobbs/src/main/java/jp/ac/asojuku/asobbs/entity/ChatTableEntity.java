package jp.ac.asojuku.asobbs.entity;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;

/**
 * チャットテーブル モデルクラス.
 * 
 * @author generated by ERMaster
 * @version $Id$
 */
@Entity 
@Table(name="CHAT_TABLE")
public class ChatTableEntity implements Serializable {

	/** serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** メッセージＩＤ. */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer msgId;

	/** MSG. */
	private String msg;

	/** 登録日時. */
	private Date regsterDatetime;

	/** ユーザーテーブル. */
	@OneToOne
    @JoinColumn(name="userId",insertable=false ,updatable=false)
	private UserTblEntity fromUserTbl;

	/** ユーザーテーブル. */
	@OneToOne
    @JoinColumn(name="userId",insertable=false ,updatable=false)
	private UserTblEntity toUserTbl;

	/** USER_ID. */
	private Integer userId;

	/**
	 * コンストラクタ.
	 */
	public ChatTableEntity() {
	}

	/**
	 * メッセージＩＤ を設定します.
	 * 
	 * @param msgId
	 *            メッセージＩＤ
	 */
	public void setMsgId(Integer msgId) {
		this.msgId = msgId;
	}

	/**
	 * メッセージＩＤ を取得します.
	 * 
	 * @return メッセージＩＤ
	 */
	public Integer getMsgId() {
		return this.msgId;
	}

	/**
	 * MSG を設定します.
	 * 
	 * @param msg
	 *            MSG
	 */
	public void setMsg(String msg) {
		this.msg = msg;
	}

	/**
	 * MSG を取得します.
	 * 
	 * @return MSG
	 */
	public String getMsg() {
		return this.msg;
	}

	/**
	 * 登録日時 を設定します.
	 * 
	 * @param regsterDatetime
	 *            登録日時
	 */
	public void setRegsterDatetime(Date regsterDatetime) {
		this.regsterDatetime = regsterDatetime;
	}

	/**
	 * 登録日時 を取得します.
	 * 
	 * @return 登録日時
	 */
	public Date getRegsterDatetime() {
		return this.regsterDatetime;
	}

	/**
	 * ユーザーテーブル を設定します.
	 * 
	 * @param fromUserTbl
	 *            ユーザーテーブル
	 */
	public void setFromUserTbl(UserTblEntity fromUserTbl) {
		this.fromUserTbl = fromUserTbl;
	}

	/**
	 * ユーザーテーブル を取得します.
	 * 
	 * @return ユーザーテーブル
	 */
	public UserTblEntity getFromUserTbl() {
		return this.fromUserTbl;
	}

	/**
	 * ユーザーテーブル を設定します.
	 * 
	 * @param toUserTbl
	 *            ユーザーテーブル
	 */
	public void setToUserTbl(UserTblEntity toUserTbl) {
		this.toUserTbl = toUserTbl;
	}

	/**
	 * ユーザーテーブル を取得します.
	 * 
	 * @return ユーザーテーブル
	 */
	public UserTblEntity getToUserTbl() {
		return this.toUserTbl;
	}

	/**
	 * USER_ID を設定します.
	 * 
	 * @param userId
	 *            USER_ID
	 */
	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	/**
	 * USER_ID を取得します.
	 * 
	 * @return USER_ID
	 */
	public Integer getUserId() {
		return this.userId;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((msgId == null) ? 0 : msgId.hashCode());
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		ChatTableEntity other = (ChatTableEntity) obj;
		if (msgId == null) {
			if (other.msgId != null) {
				return false;
			}
		} else if (!msgId.equals(other.msgId)) {
			return false;
		}
		return true;
	}

}
