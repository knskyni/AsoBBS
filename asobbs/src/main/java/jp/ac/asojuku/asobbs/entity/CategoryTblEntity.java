package jp.ac.asojuku.asobbs.entity;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import lombok.Data;

/**
 * カテゴリテーブル モデルクラス.
 * 
 * @author generated by ERMaster
 * @version $Id$
 */
@Data
@Entity 
@Table(name="CATEGORY_TBL")
public class CategoryTblEntity implements Serializable {

	/** serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** カテゴリID. */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer categoryId;

	private Integer roomId;	//挿入・更新用
	/** ルームテーブル. */
	@ManyToOne
	@JoinColumn(name="roomId",insertable=false ,updatable=false)
	private RoomTblEntity roomTbl;
	

	/** カテゴリ名. */
	private String name;

	/** カテゴリにある掲示数. */
	private Integer count;

	/** 掲示板テーブル 一覧. */
	@OneToMany
	@JoinColumn(name="categoryId",insertable=false ,updatable=false)
	private Set<BbsTblEntity> bbsTblSet;

	/**
	 * コンストラクタ.
	 */
	public CategoryTblEntity() {
		this.bbsTblSet = new HashSet<BbsTblEntity>();
	}
	
	/**
	 * カテゴリに属している掲示数をインクリメントする
	 */
	public void addCount() {
		count++;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((categoryId == null) ? 0 : categoryId.hashCode());
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		CategoryTblEntity other = (CategoryTblEntity) obj;
		if (categoryId == null) {
			if (other.categoryId != null) {
				return false;
			}
		} else if (!categoryId.equals(other.categoryId)) {
			return false;
		}
		return true;
	}

}
