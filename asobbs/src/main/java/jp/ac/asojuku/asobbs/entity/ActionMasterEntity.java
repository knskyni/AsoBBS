package jp.ac.asojuku.asobbs.entity;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

/**
 * 動作マスター モデルクラス.
 * 
 * @author generated by ERMaster
 * @version $Id$
 */
@Entity 
@Table(name="ACTION_MASTER")
public class ActionMasterEntity implements Serializable {

	/** serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** アクションID. */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer actionId;

	/** 動作名. */
	private String actionName;


	/**
	 * コンストラクタ.
	 */
	public ActionMasterEntity() {
	}

	/**
	 * アクションID を設定します.
	 * 
	 * @param actionId
	 *            アクションID
	 */
	public void setActionId(Integer actionId) {
		this.actionId = actionId;
	}

	/**
	 * アクションID を取得します.
	 * 
	 * @return アクションID
	 */
	public Integer getActionId() {
		return this.actionId;
	}

	/**
	 * 動作名 を設定します.
	 * 
	 * @param actionName
	 *            動作名
	 */
	public void setActionName(String actionName) {
		this.actionName = actionName;
	}

	/**
	 * 動作名 を取得します.
	 * 
	 * @return 動作名
	 */
	public String getActionName() {
		return this.actionName;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((actionId == null) ? 0 : actionId.hashCode());
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		ActionMasterEntity other = (ActionMasterEntity) obj;
		if (actionId == null) {
			if (other.actionId != null) {
				return false;
			}
		} else if (!actionId.equals(other.actionId)) {
			return false;
		}
		return true;
	}

}
